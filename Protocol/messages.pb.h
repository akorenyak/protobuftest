// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef PROTOBUF_messages_2eproto__INCLUDED
#define PROTOBUF_messages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace messages {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_messages_2eproto();
void protobuf_AssignDesc_messages_2eproto();
void protobuf_ShutdownFile_messages_2eproto();

class ScanFile;
class ScanProgress;
class ScanResult;

enum ScanMode {
  SCAN_START = 0,
  SCAN_FILE = 1,
  SCAN_STOP = 2
};
bool ScanMode_IsValid(int value);
const ScanMode ScanMode_MIN = SCAN_START;
const ScanMode ScanMode_MAX = SCAN_STOP;
const int ScanMode_ARRAYSIZE = ScanMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ScanMode_descriptor();
inline const ::std::string& ScanMode_Name(ScanMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ScanMode_descriptor(), value);
}
inline bool ScanMode_Parse(
    const ::std::string& name, ScanMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ScanMode>(
    ScanMode_descriptor(), name, value);
}
enum ResultCode {
  SCAN_FINISHED = 0,
  SCAN_STOPPED = 1
};
bool ResultCode_IsValid(int value);
const ResultCode ResultCode_MIN = SCAN_FINISHED;
const ResultCode ResultCode_MAX = SCAN_STOPPED;
const int ResultCode_ARRAYSIZE = ResultCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultCode_descriptor();
inline const ::std::string& ResultCode_Name(ResultCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultCode_descriptor(), value);
}
inline bool ResultCode_Parse(
    const ::std::string& name, ResultCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultCode>(
    ResultCode_descriptor(), name, value);
}
// ===================================================================

class ScanFile : public ::google::protobuf::Message {
 public:
  ScanFile();
  virtual ~ScanFile();

  ScanFile(const ScanFile& from);

  inline ScanFile& operator=(const ScanFile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScanFile& default_instance();

  void Swap(ScanFile* other);

  // implements Message ----------------------------------------------

  ScanFile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScanFile& from);
  void MergeFrom(const ScanFile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 fileindex = 1;
  inline bool has_fileindex() const;
  inline void clear_fileindex();
  static const int kFileindexFieldNumber = 1;
  inline ::google::protobuf::int32 fileindex() const;
  inline void set_fileindex(::google::protobuf::int32 value);

  // required string path = 2;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // required .messages.ScanMode ScanMode = 3;
  inline bool has_scanmode() const;
  inline void clear_scanmode();
  static const int kScanModeFieldNumber = 3;
  inline ::messages::ScanMode scanmode() const;
  inline void set_scanmode(::messages::ScanMode value);

  // @@protoc_insertion_point(class_scope:messages.ScanFile)
 private:
  inline void set_has_fileindex();
  inline void clear_has_fileindex();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_scanmode();
  inline void clear_has_scanmode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* path_;
  ::google::protobuf::int32 fileindex_;
  int scanmode_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ScanFile* default_instance_;
};
// -------------------------------------------------------------------

class ScanProgress : public ::google::protobuf::Message {
 public:
  ScanProgress();
  virtual ~ScanProgress();

  ScanProgress(const ScanProgress& from);

  inline ScanProgress& operator=(const ScanProgress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScanProgress& default_instance();

  void Swap(ScanProgress* other);

  // implements Message ----------------------------------------------

  ScanProgress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScanProgress& from);
  void MergeFrom(const ScanProgress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 fileindex = 1;
  inline bool has_fileindex() const;
  inline void clear_fileindex();
  static const int kFileindexFieldNumber = 1;
  inline ::google::protobuf::int32 fileindex() const;
  inline void set_fileindex(::google::protobuf::int32 value);

  // required string path = 2;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // required int32 progress = 3;
  inline bool has_progress() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 3;
  inline ::google::protobuf::int32 progress() const;
  inline void set_progress(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:messages.ScanProgress)
 private:
  inline void set_has_fileindex();
  inline void clear_has_fileindex();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_progress();
  inline void clear_has_progress();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* path_;
  ::google::protobuf::int32 fileindex_;
  ::google::protobuf::int32 progress_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ScanProgress* default_instance_;
};
// -------------------------------------------------------------------

class ScanResult : public ::google::protobuf::Message {
 public:
  ScanResult();
  virtual ~ScanResult();

  ScanResult(const ScanResult& from);

  inline ScanResult& operator=(const ScanResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScanResult& default_instance();

  void Swap(ScanResult* other);

  // implements Message ----------------------------------------------

  ScanResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScanResult& from);
  void MergeFrom(const ScanResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 fileindex = 1;
  inline bool has_fileindex() const;
  inline void clear_fileindex();
  static const int kFileindexFieldNumber = 1;
  inline ::google::protobuf::int32 fileindex() const;
  inline void set_fileindex(::google::protobuf::int32 value);

  // required string path = 2;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // required string result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline const ::std::string& result() const;
  inline void set_result(const ::std::string& value);
  inline void set_result(const char* value);
  inline void set_result(const char* value, size_t size);
  inline ::std::string* mutable_result();
  inline ::std::string* release_result();
  inline void set_allocated_result(::std::string* result);

  // required .messages.ResultCode resultCode = 4;
  inline bool has_resultcode() const;
  inline void clear_resultcode();
  static const int kResultCodeFieldNumber = 4;
  inline ::messages::ResultCode resultcode() const;
  inline void set_resultcode(::messages::ResultCode value);

  // @@protoc_insertion_point(class_scope:messages.ScanResult)
 private:
  inline void set_has_fileindex();
  inline void clear_has_fileindex();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_resultcode();
  inline void clear_has_resultcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* path_;
  ::google::protobuf::int32 fileindex_;
  int resultcode_;
  ::std::string* result_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ScanResult* default_instance_;
};
// ===================================================================


// ===================================================================

// ScanFile

// required int32 fileindex = 1;
inline bool ScanFile::has_fileindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScanFile::set_has_fileindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScanFile::clear_has_fileindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScanFile::clear_fileindex() {
  fileindex_ = 0;
  clear_has_fileindex();
}
inline ::google::protobuf::int32 ScanFile::fileindex() const {
  // @@protoc_insertion_point(field_get:messages.ScanFile.fileindex)
  return fileindex_;
}
inline void ScanFile::set_fileindex(::google::protobuf::int32 value) {
  set_has_fileindex();
  fileindex_ = value;
  // @@protoc_insertion_point(field_set:messages.ScanFile.fileindex)
}

// required string path = 2;
inline bool ScanFile::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScanFile::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScanFile::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScanFile::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& ScanFile::path() const {
  // @@protoc_insertion_point(field_get:messages.ScanFile.path)
  return *path_;
}
inline void ScanFile::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:messages.ScanFile.path)
}
inline void ScanFile::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:messages.ScanFile.path)
}
inline void ScanFile::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:messages.ScanFile.path)
}
inline ::std::string* ScanFile::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:messages.ScanFile.path)
  return path_;
}
inline ::std::string* ScanFile::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ScanFile::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:messages.ScanFile.path)
}

// required .messages.ScanMode ScanMode = 3;
inline bool ScanFile::has_scanmode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScanFile::set_has_scanmode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScanFile::clear_has_scanmode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScanFile::clear_scanmode() {
  scanmode_ = 0;
  clear_has_scanmode();
}
inline ::messages::ScanMode ScanFile::scanmode() const {
  // @@protoc_insertion_point(field_get:messages.ScanFile.ScanMode)
  return static_cast< ::messages::ScanMode >(scanmode_);
}
inline void ScanFile::set_scanmode(::messages::ScanMode value) {
  assert(::messages::ScanMode_IsValid(value));
  set_has_scanmode();
  scanmode_ = value;
  // @@protoc_insertion_point(field_set:messages.ScanFile.ScanMode)
}

// -------------------------------------------------------------------

// ScanProgress

// required int32 fileindex = 1;
inline bool ScanProgress::has_fileindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScanProgress::set_has_fileindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScanProgress::clear_has_fileindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScanProgress::clear_fileindex() {
  fileindex_ = 0;
  clear_has_fileindex();
}
inline ::google::protobuf::int32 ScanProgress::fileindex() const {
  // @@protoc_insertion_point(field_get:messages.ScanProgress.fileindex)
  return fileindex_;
}
inline void ScanProgress::set_fileindex(::google::protobuf::int32 value) {
  set_has_fileindex();
  fileindex_ = value;
  // @@protoc_insertion_point(field_set:messages.ScanProgress.fileindex)
}

// required string path = 2;
inline bool ScanProgress::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScanProgress::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScanProgress::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScanProgress::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& ScanProgress::path() const {
  // @@protoc_insertion_point(field_get:messages.ScanProgress.path)
  return *path_;
}
inline void ScanProgress::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:messages.ScanProgress.path)
}
inline void ScanProgress::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:messages.ScanProgress.path)
}
inline void ScanProgress::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:messages.ScanProgress.path)
}
inline ::std::string* ScanProgress::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:messages.ScanProgress.path)
  return path_;
}
inline ::std::string* ScanProgress::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ScanProgress::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:messages.ScanProgress.path)
}

// required int32 progress = 3;
inline bool ScanProgress::has_progress() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScanProgress::set_has_progress() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScanProgress::clear_has_progress() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScanProgress::clear_progress() {
  progress_ = 0;
  clear_has_progress();
}
inline ::google::protobuf::int32 ScanProgress::progress() const {
  // @@protoc_insertion_point(field_get:messages.ScanProgress.progress)
  return progress_;
}
inline void ScanProgress::set_progress(::google::protobuf::int32 value) {
  set_has_progress();
  progress_ = value;
  // @@protoc_insertion_point(field_set:messages.ScanProgress.progress)
}

// -------------------------------------------------------------------

// ScanResult

// required int32 fileindex = 1;
inline bool ScanResult::has_fileindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScanResult::set_has_fileindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScanResult::clear_has_fileindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScanResult::clear_fileindex() {
  fileindex_ = 0;
  clear_has_fileindex();
}
inline ::google::protobuf::int32 ScanResult::fileindex() const {
  // @@protoc_insertion_point(field_get:messages.ScanResult.fileindex)
  return fileindex_;
}
inline void ScanResult::set_fileindex(::google::protobuf::int32 value) {
  set_has_fileindex();
  fileindex_ = value;
  // @@protoc_insertion_point(field_set:messages.ScanResult.fileindex)
}

// required string path = 2;
inline bool ScanResult::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScanResult::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScanResult::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScanResult::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& ScanResult::path() const {
  // @@protoc_insertion_point(field_get:messages.ScanResult.path)
  return *path_;
}
inline void ScanResult::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:messages.ScanResult.path)
}
inline void ScanResult::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:messages.ScanResult.path)
}
inline void ScanResult::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:messages.ScanResult.path)
}
inline ::std::string* ScanResult::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:messages.ScanResult.path)
  return path_;
}
inline ::std::string* ScanResult::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ScanResult::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:messages.ScanResult.path)
}

// required string result = 3;
inline bool ScanResult::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScanResult::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScanResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScanResult::clear_result() {
  if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_->clear();
  }
  clear_has_result();
}
inline const ::std::string& ScanResult::result() const {
  // @@protoc_insertion_point(field_get:messages.ScanResult.result)
  return *result_;
}
inline void ScanResult::set_result(const ::std::string& value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  result_->assign(value);
  // @@protoc_insertion_point(field_set:messages.ScanResult.result)
}
inline void ScanResult::set_result(const char* value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  result_->assign(value);
  // @@protoc_insertion_point(field_set_char:messages.ScanResult.result)
}
inline void ScanResult::set_result(const char* value, size_t size) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  result_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:messages.ScanResult.result)
}
inline ::std::string* ScanResult::mutable_result() {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:messages.ScanResult.result)
  return result_;
}
inline ::std::string* ScanResult::release_result() {
  clear_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = result_;
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ScanResult::set_allocated_result(::std::string* result) {
  if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_;
  }
  if (result) {
    set_has_result();
    result_ = result;
  } else {
    clear_has_result();
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:messages.ScanResult.result)
}

// required .messages.ResultCode resultCode = 4;
inline bool ScanResult::has_resultcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScanResult::set_has_resultcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScanResult::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScanResult::clear_resultcode() {
  resultcode_ = 0;
  clear_has_resultcode();
}
inline ::messages::ResultCode ScanResult::resultcode() const {
  // @@protoc_insertion_point(field_get:messages.ScanResult.resultCode)
  return static_cast< ::messages::ResultCode >(resultcode_);
}
inline void ScanResult::set_resultcode(::messages::ResultCode value) {
  assert(::messages::ResultCode_IsValid(value));
  set_has_resultcode();
  resultcode_ = value;
  // @@protoc_insertion_point(field_set:messages.ScanResult.resultCode)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::messages::ScanMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::messages::ScanMode>() {
  return ::messages::ScanMode_descriptor();
}
template <> struct is_proto_enum< ::messages::ResultCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::messages::ResultCode>() {
  return ::messages::ResultCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_2eproto__INCLUDED
